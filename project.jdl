//@microservice(svcStudent)
entity Student {
    /** generated value */
    studentNumber String,
    firstName String required,
    lastName String required,
    gender Gender required,
    email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/),
    phone String required,
    addressLine1 String required,
    addressLine2 String,
    city String required,
    country String required,
    userId Long
}

entity StudentEnroll {
    enrollYear Integer required
    forProgrammeId Long required
    forDegree Degree required
    status EnrollStatus required
}

enum Degree{
    BACHELOR, MASTER, DOCTER
}

enum EnrollStatus{
    TAKING, SUSPEND, DONE
}

relationship OneToMany {
    Student to StudentEnroll{Student(studentNumber)}
}

enum Gender {
    MALE, FEMALE, OTHER
}

entity StudentProgression{
    yearNo Integer required
    semesterNo Integer required
    /** semesterNo -> qca */
    qca Double required
    /** 0:not   1...n:part n  | yearNo(finish of a part) -> cumulativeQcaForPart */
    cumulativeQcaForPart Integer required
    /** yearNo -> progressDecision*/
    progressDecision ProgressDecision
}

/** SUSPENSION: pause progress, won't be registered in next semester
 *  FAIL_CAN_REPEAT: after repeat successful will be changed into PASS
 *  FAIL_NO_REPEAT: won't be registered into next semester, need to learn modules of this year again
 */
enum ProgressDecision{
    PASS, SUSPENSION, FAIL_CAN_REPEAT, FAIL_NO_REPEAT
}

relationship OneToMany {
    Student to StudentProgression{Student(studentNumber)}
}

entity Faculty{
    name String required
}

entity Department{
    name String required
}

entity Programme{
    code String required,
    name String required,
    length Integer required,
    courseLeader String required
    degree String required
}

entity ProgrammePropDict{
    forEnrollYear Integer required
    type ProgrammePropType required
    forYearNo Integer
    forSemesterNo Integer
    /** semester->factor, semester->belong_to_part, general->how_many_parts */
    key String required
    value String required
}

enum ProgrammePropType{
    GENERAL, YEAR, SEMESTER
}

relationship OneToMany {
    Faculty to Department{Faculty(name) required}
}

relationship OneToMany {
    Department to Programme{Department(name) required}
}

entity Module {
    code String required,
    name String required,
    credit Double required
}

entity StudentModuleSelection {
    studentId Long required
    yearNo Integer required
    semesterNo Integer required
    /** null before module finished*/ 
    creditHour Double 
    /** null before module finished*/ 
    marks Double
    /** null before module finished*/ 
    qcs Double
}

relationship ManyToOne {
    StudentModuleSelection{Module(name)} to Module
}

entity StudentModuleGradeDict{
    name String required unique,
    description String required,
    /** marks bigger than this will get corresponding qpv*/
    lowMarks Integer
    qpv Double,
    isAffectQca Boolean
}

relationship ManyToOne {
    StudentModuleSelection{StudentModuleGradeType(name)} to StudentModuleGradeDict
}

dto * with mapstruct
paginate * with pagination
service * with serviceClass
microservice Student, StudentEnroll, StudentProgression with svcStudent
microservice Faculty, Department, Programme, ProgrammePropDict with svcProgramme
microservice Module, StudentModuleSelection, StudentModuleGradeDict with svcProgrammeModule
//search * with elasticsearch

application {
    config {
        baseName svcStudent
        packageName cc.orangejuice.srs.student
        authenticationType uaa
        uaaBaseName "cloudauth"
        applicationType microservice
        //searchEngine elasticsearch
        serviceDiscoveryType eureka
        buildTool gradle
        serverPort 8081
    }
    entities Student, StudentEnroll, StudentProgression
}

application {
    config {
        baseName svcProgramme
        packageName cc.orangejuice.srs.programme
        authenticationType uaa
        uaaBaseName "cloudauth"
        applicationType microservice
        //searchEngine elasticsearch
        serviceDiscoveryType eureka
        buildTool gradle
        serverPort 8082
    }
    entities Faculty, Department, Programme, ProgrammePropDict
}

application {
    config {
        baseName svcProgrammeModule
        packageName cc.orangejuice.srs.programme.module
        authenticationType uaa
        uaaBaseName "cloudauth"
        applicationType microservice
        //searchEngine elasticsearch
        serviceDiscoveryType eureka
        buildTool gradle
        serverPort 8083
    }
    entities Module, StudentModuleSelection, StudentModuleGradeDict
}

application {
    config {
        baseName cloudGateway
        packageName cc.orangejuice.srs.gateway
        authenticationType uaa
        uaaBaseName "cloudauth"
        applicationType gateway
        serviceDiscoveryType eureka
        buildTool gradle
        //skipClient true
    }
    entities *
}

application {
    config {
        baseName cloudAuth
        packageName cc.orangejuice.srs.auth
        applicationType uaa
        //searchEngine elasticsearch
        serviceDiscoveryType eureka
        buildTool gradle
    }
}

deployment {
    deploymentType docker-compose
    appsFolders [svcStudent, svcProgramme, svcProgrammeModule, cloudGateway, cloudAuth]
    dockerRepositoryName "cherrymeteor"
    //monitoring elk
    //consoleOptions [curator, zipkin]
}