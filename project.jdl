entity Student {
    studentNumber String,
    firstName String required,
    lastName String required,
    gender Gender required,
    email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/),
    phone String required,
    addressLine1 String required,
    addressLine2 String,
    city String required,
    country String required,
    userId Long
}

entity StudentEnroll {
    enrollYear Integer required
    forProgrammeId Long required
    forDegree Degree required
    status EnrollStatus required
}

enum Degree{
    BACHELOR, MASTER, DOCTOR
}

enum EnrollStatus{
    TAKING, SUSPEND, DONE
}

relationship OneToMany {
    Student to StudentEnroll{Student(studentNumber)}
}

enum Gender {
    MALE, FEMALE, OTHER
}

entity StudentProgression{
    forAcademicYear Integer
    forAcademicSemester Integer
    forPartNo Integer
    qca Double required
    progressType ProgressType
    progressDecision ProgressDecision
}

enum ProgressType{
    SEMESTER, YEAR, PART
}

enum ProgressDecision{
    PASS, SUSPENSION, FAIL_CAN_REPEAT, FAIL_NO_REPEAT
}

relationship OneToMany {
    Student to StudentProgression{Student(studentNumber)}
}

entity Faculty{
    name String required
}

entity Department{
    name String required
}

entity Programme{
    code String required,
    name String required,
    length Integer required,
    courseLeader String required
    degree String required
}

entity ProgrammeProp{
    forEnrollYear Integer required
    type ProgrammePropType required
    forYearNo Integer
    forSemesterNo Integer
    key String required
    value String required
}

enum ProgrammePropType{
    GENERAL, YEAR, SEMESTER
}

relationship OneToMany {
    Faculty to Department{Faculty(name) required}
}

relationship OneToMany {
    Department to Programme{Department(name) required}
}

entity Module {
    code String required,
    name String required,
    credit Double required
}

entity StudentModuleSelection {
    studentId Long required
    academicYear Integer required
    academicSemester Integer required
    yearNo Integer required
    semesterNo Integer required
    creditHour Double
    marks Double
    qcs Double
}

relationship ManyToOne {
    StudentModuleSelection{Module(name)} to Module
}

entity ModuleGrade{
    name String required unique,
    description String required,
    /** marks bigger than this will get corresponding qpv*/
    lowMarks Integer
    qpv Double,
    isAffectQca Boolean
}

relationship ManyToOne {
    StudentModuleSelection{StudentModuleGradeType(name)} to ModuleGrade
}

dto * with mapstruct
paginate * with pagination
service * with serviceClass
microservice Student, StudentEnroll, StudentProgression with svcStudent
microservice Faculty, Department, Programme, ProgrammeProp with svcProgramme
microservice Module, StudentModuleSelection, ModuleGrade with svcModule

application {
    config {
        baseName svcStudent
        packageName cc.orangejuice.srs.student
        authenticationType uaa
        uaaBaseName "cloudauth"
        applicationType microservice
        serviceDiscoveryType eureka
        buildTool gradle
        serverPort 8081
    }
    entities Student, StudentEnroll, StudentProgression
}

application {
    config {
        baseName svcProgramme
        packageName cc.orangejuice.srs.programme
        authenticationType uaa
        uaaBaseName "cloudauth"
        applicationType microservice
        serviceDiscoveryType eureka
        buildTool gradle
        serverPort 8082
    }
    entities Faculty, Department, Programme, ProgrammeProp
}

application {
    config {
        baseName svcModule
        packageName cc.orangejuice.srs.module
        authenticationType uaa
        uaaBaseName "cloudauth"
        applicationType microservice
        serviceDiscoveryType eureka
        buildTool gradle
        serverPort 8083
    }
    entities Module, StudentModuleSelection, ModuleGrade
}

application {
    config {
        baseName cloudGateway
        packageName cc.orangejuice.srs.gateway
        authenticationType uaa
        uaaBaseName "cloudauth"
        applicationType gateway
        serviceDiscoveryType eureka
        buildTool gradle
    }
    entities *
}

application {
    config {
        baseName cloudAuth
        packageName cc.orangejuice.srs.auth
        applicationType uaa
        serviceDiscoveryType eureka
        buildTool gradle
    }
}

deployment {
    deploymentType docker-compose
    appsFolders [svcStudent, svcProgramme, svcModule, cloudGateway, cloudAuth]
    dockerRepositoryName "cherrymeteor"
}